     1                                  ; 15.02.2020
     2                                  ;
     3                                  ; Have an animation with a moving X from left to right
     4                                  ;
     5                                  
     6                                      org 0x0100
     7 00000000 EB17                        jmp start
     8                                  
     9                                  
    10                                  
    11                                  x_pos: equ 0x0800
    12 00000002 48656C6C6F2C20776F-     string: db "Hello, world", 0
    12 0000000B 726C6400           
    13 0000000F 57656C636F6D653A20-     string_welcome: db "Welcome: ", 0
    13 00000018 00                 
    14                                  
    15                                  start:
    16 00000019 E8B300                      call clear_screen
    17 0000001C BA1806                      mov dx, 0x0618
    18 0000001F E87800                      call set_cursor
    19 00000022 BB[0F00]                    mov bx, string_welcome
    20 00000025 E89600                      call print_string
    21 00000028 C606000800                  mov byte [x_pos], 0
    22                                  main_loop:
    23 0000002D B90C00                      mov cx, 12
    24                                  main_loop_1:
    25 00000030 E83300                      call draw
    26 00000033 8006000801                  add byte [x_pos], 1
    27 00000038 90                          nop
    28 00000039 E8AA00                      call wait_for_tick
    29 0000003C E8A000                      call is_key_pressed
    30 0000003F 751A                        jnz end
    31 00000041 E2ED                        loop main_loop_1  
    32 00000043 B90C00                      mov cx, 12
    33                                  main_loop_2:
    34 00000046 802E000801                  sub byte [x_pos], 1
    35 0000004B E81800                      call draw
    36 0000004E 90                          nop
    37 0000004F E89400                      call wait_for_tick
    38 00000052 E88A00                      call is_key_pressed
    39 00000055 7504                        jnz end
    40 00000057 E2ED                        loop main_loop_2  
    41 00000059 EBD2                        jmp main_loop
    42                                  end:
    43 0000005B B03F                        mov al, '?'
    44 0000005D E84300                      call print_char
    45 00000060 B400                        mov ah, 0x0
    46 00000062 CD16                        int 0x16
    47 00000064 CD20                        int 0x20
    48                                  
    49                                  draw:
    50 00000066 BA1808                      mov dx, 0x0818
    51 00000069 E82E00                      call set_cursor
    52 0000006C B8[0200]                    mov ax, string
    53 0000006F E80400                      call draw_string
    54 00000072 E83A00                      call print_newline
    55 00000075 C3                          ret
    56                                  
    57                                  draw_string:
    58 00000076 50                          push ax
    59 00000077 53                          push bx
    60 00000078 51                          push cx
    61 00000079 89C3                        mov bx, ax
    62 0000007B B90000                      mov cx, 0    
    63                                  draw_string_repeat:
    64 0000007E 53                          push bx                 ; get current char of string
    65 0000007F 01CB                        add bx, cx
    66 00000081 8A07                        mov al, [bx]            
    67 00000083 5B                          pop bx
    68 00000084 3C00                        cmp al, 0               ; is string finished
    69 00000086 740E                        je draw_string_end
    70 00000088 3A0E0008                    cmp cl, byte [x_pos]     ; am i at current pos 
    71 0000008C 7502                        jne draw_string_repeat_1 ; replace char with an 'X'
    72 0000008E B058                        mov al, 'X'
    73                                  draw_string_repeat_1: 
    74 00000090 E81000                      call print_char 
    75 00000093 41                          inc cx
    76 00000094 EBE8                        jmp draw_string_repeat
    77                                  draw_string_end:
    78 00000096 59                          pop cx
    79 00000097 5B                          pop bx
    80 00000098 58                          pop ax
    81 00000099 C3                          ret
    82                                  
    83                                  set_cursor:
    84 0000009A 50                          push ax
    85 0000009B B402                        mov ah, 0x02
    86 0000009D B700                        mov bh, 0x0
    87 0000009F CD10                        int 0x10
    88 000000A1 58                          pop ax
    89 000000A2 C3                          ret
    90                                  
    91                                  ; ---- library functions -----
    92                                  
    93                                  ; --- printing
    94                                  
    95                                  print_char:
    96 000000A3 50                          push ax
    97 000000A4 53                          push bx
    98 000000A5 B40E                        mov ah, 0x0e
    99 000000A7 BB0F00                      mov bx, 0x000f
   100 000000AA CD10                        int 0x10
   101 000000AC 5B                          pop bx
   102 000000AD 58                          pop ax
   103 000000AE C3                          ret
   104                                  
   105                                  print_newline:
   106 000000AF 50                          push ax
   107 000000B0 B80A00                      mov ax, 0x0a
   108 000000B3 E8EDFF                      call print_char
   109 000000B6 B80D00                      mov ax, 0x0d
   110 000000B9 E8E7FF                      call print_char
   111 000000BC 58                          pop ax
   112 000000BD C3                          ret
   113                                  
   114                                  print_string:   ; prints characters at [bx] until a '\0' is found
   115 000000BE 50                          push ax
   116 000000BF 53                          push bx
   117                                  print_string_repeat:
   118 000000C0 8A07                        mov al, byte [bx]     
   119 000000C2 3C00                        cmp al, 0               ; is string finished
   120 000000C4 7406                        je print_string_end
   121 000000C6 E8DAFF                      call print_char 
   122 000000C9 43                          inc bx
   123 000000CA EBF4                        jmp print_string_repeat
   124                                  print_string_end:
   125 000000CC 5B                          pop bx
   126 000000CD 58                          pop ax
   127 000000CE C3                          ret
   128                                      
   129                                  clear_screen:
   130 000000CF 50                          push ax
   131 000000D0 B400                        mov ah, 0x00
   132 000000D2 B003                        mov al, 0x03
   133 000000D4 CD10                        int 0x10
   134 000000D6 58                          pop ax
   135 000000D7 C3                          ret
   136                                  
   137                                  ; --- others
   138                                  
   139                                  
   140                                  get_time:   ; ticks are in (high) cx, (low) dx
   141 000000D8 50                          push ax 
   142 000000D9 B400                        mov ah, 0x00
   143 000000DB CD1A                        int 0x1A
   144 000000DD 58                          pop ax
   145 000000DE C3                          ret    
   146                                  
   147                                  is_key_pressed:
   148 000000DF 50                          push ax
   149 000000E0 B401                        mov ah, 0x01
   150 000000E2 CD16                        int 0x16
   151 000000E4 58                          pop ax
   152 000000E5 C3                          ret
   153                                  
   154                                  wait_for_tick:   ; ticks are in cx, dx
   155 000000E6 50                          push ax 
   156 000000E7 51                          push cx
   157 000000E8 52                          push dx
   158 000000E9 E8ECFF                      call get_time
   159 000000EC 89D0                        mov ax, dx
   160                                  wait_for_tick_1:
   161 000000EE E8E7FF                      call get_time
   162 000000F1 39D0                        cmp ax, dx
   163 000000F3 74F9                        je wait_for_tick_1
   164 000000F5 5A                          pop dx
   165 000000F6 59                          pop cx
   166 000000F7 58                          pop ax
   167 000000F8 C3                          ret             
