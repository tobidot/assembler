     1                                  ; 15.02.2020
     2                                  ;
     3                                  ; Have an animation with a moving X from left to right
     4                                  ;
     5                                  
     6                                      org 0x0100
     7 00000000 EB06                        jmp start
     8                                  
     9                                  
    10                                  
    11                                  x_pos: equ 0x0800
    12                                  bitmap_y: 
    13 00000002 42                          db 0b01000010
    14 00000003 24                          db 0b00100100
    15 00000004 18                          db 0b00011000
    16 00000005 30                          db 0b00110000
    17 00000006 60                          db 0b01100000
    18 00000007 C0                          db 0b11000000
    19                                  
    20                                  start:
    21 00000008 E89D00                      call clear_screen  
    22 0000000B BB[0200]                    mov bx, bitmap_y
    23 0000000E B90501                      mov cx, 0x0105    
    24 00000011 BA0804                      mov dx, 0x0408
    25 00000014 E81300                      call draw_bitmap
    26                                  
    27 00000017 BA0408                      mov dx, 0x0804
    28 0000001A E88000                      call set_cursor  
    29 0000001D B03F                        mov al, '?'
    30 0000001F E84F00                      call print_char    
    31 00000022 E89F00                      call wait_for_key_press
    32 00000025 E84900                      call print_char  
    33                                  end:
    34 00000028 CD20                        int 0x20
    35                                     
    36                                  ; --- funcitons
    37                                  
    38                                  ; --- draws the bitmap at [bx] with (ch*8) cols and (cl) rows at position (dx)
    39                                  ; at (dx) position => (dh) => row, (dl) => col
    40                                  ; 8 x 6
    41                                  draw_bitmap:
    42 0000002A 50                          push ax
    43 0000002B 53                          push bx 
    44 0000002C 51                          push cx
    45 0000002D 52                          push dx
    46 0000002E 88E8                        mov al, ch
    47 00000030 B400                        mov ah, 0x0     ; store cols
    48 00000032 B500                        mov ch, 0x0     ; store rows
    49                                  draw_bitmap__all_rows:
    50 00000034 E86600                      call set_cursor
    51 00000037 51                          push cx
    52 00000038 88C1                        mov cl, al
    53 0000003A E80A00                      call draw_bitmap__row
    54 0000003D 59                          pop cx
    55 0000003E FEC6                        inc dh          ; mov to next line
    56 00000040 E2F2                        loop draw_bitmap__all_rows
    57 00000042 5A                          pop dx
    58 00000043 59                          pop cx
    59 00000044 5B                          pop bx 
    60 00000045 58                          pop ax
    61 00000046 C3                          ret
    62                                      
    63                                  draw_bitmap__row:    
    64 00000047 50                          push ax
    65 00000048 8B07                        mov ax, [bx]
    66 0000004A E80700                      call draw_bitmap__byte
    67 0000004D 83C301                      add bx, 1
    68 00000050 E2F5                        loop draw_bitmap__row
    69 00000052 58                          pop ax
    70 00000053 C3                          ret
    71                                  draw_bitmap__byte:
    72 00000054 51                          push cx
    73 00000055 B90800                      mov cx, 8
    74                                  draw_bitmap__byte_repeat:
    75 00000058 D0E0                        shl al, 1
    76 0000005A 50                          push ax
    77 0000005B 7308                        jnc draw_bitmap__byte_skip
    78 0000005D B02B                        mov al, '+'
    79 0000005F E80F00                      call print_char
    80 00000062 58                          pop ax
    81 00000063 E2F3                        loop draw_bitmap__byte_repeat
    82                                  draw_bitmap__byte_skip:
    83 00000065 B020                        mov al, ' '
    84 00000067 E80700                      call print_char
    85 0000006A 58                          pop ax
    86 0000006B E2EB                        loop draw_bitmap__byte_repeat
    87 0000006D 59                          pop cx
    88 0000006E C3                          ret
    89                                  
    90                                     
    91                                  ; ---- general-library functions -----
    92 0000006F CD20                        int 0x20
    93                                  
    94                                  ; --- printing
    95                                  
    96                                  print_char:
    97 00000071 50                          push ax
    98 00000072 53                          push bx
    99 00000073 B40E                        mov ah, 0x0e
   100 00000075 BB0F00                      mov bx, 0x000f
   101 00000078 CD10                        int 0x10
   102 0000007A 5B                          pop bx
   103 0000007B 58                          pop ax
   104 0000007C C3                          ret
   105                                  
   106                                  print_newline:
   107 0000007D 50                          push ax
   108 0000007E B80A00                      mov ax, 0x0a
   109 00000081 E8EDFF                      call print_char
   110 00000084 B80D00                      mov ax, 0x0d
   111 00000087 E8E7FF                      call print_char
   112 0000008A 58                          pop ax
   113 0000008B C3                          ret
   114                                  
   115                                  print_string:   ; prints characters at [bx] until a '\0' is found
   116 0000008C 50                          push ax
   117 0000008D 53                          push bx
   118                                  print_string_repeat:
   119 0000008E 8A07                        mov al, byte [bx]     
   120 00000090 3C00                        cmp al, 0               ; is string finished
   121 00000092 7406                        je print_string_end
   122 00000094 E8DAFF                      call print_char 
   123 00000097 43                          inc bx
   124 00000098 EBF4                        jmp print_string_repeat
   125                                  print_string_end:
   126 0000009A 5B                          pop bx
   127 0000009B 58                          pop ax
   128 0000009C C3                          ret
   129                                      
   130                                  ; --- screen control
   131                                  
   132                                  ; mov the cursoer 
   133                                  ; (dh) => row
   134                                  ; (dl) => col
   135                                  set_cursor:
   136 0000009D 50                          push ax
   137 0000009E 53                          push bx
   138 0000009F B402                        mov ah, 0x02
   139 000000A1 B700                        mov bh, 0x0
   140 000000A3 CD10                        int 0x10
   141 000000A5 5B                          pop bx
   142 000000A6 58                          pop ax
   143 000000A7 C3                          ret
   144                                  
   145                                  clear_screen:
   146 000000A8 50                          push ax
   147 000000A9 B400                        mov ah, 0x00
   148 000000AB B003                        mov al, 0x03
   149 000000AD CD10                        int 0x10
   150 000000AF 58                          pop ax
   151 000000B0 C3                          ret
   152                                  
   153                                  ; --- flow controls
   154                                  
   155                                  wait_for_tick:   ; ticks are in cx, dx
   156 000000B1 50                          push ax 
   157 000000B2 51                          push cx
   158 000000B3 52                          push dx
   159 000000B4 E81700                      call get_time
   160 000000B7 89D0                        mov ax, dx
   161                                  wait_for_tick_1:
   162 000000B9 E81200                      call get_time
   163 000000BC 39D0                        cmp ax, dx
   164 000000BE 74F9                        je wait_for_tick_1
   165 000000C0 5A                          pop dx
   166 000000C1 59                          pop cx
   167 000000C2 58                          pop ax
   168 000000C3 C3                          ret     
   169                                      
   170                                  ; returns 
   171                                  ; (ah) = keycode
   172                                  ; (al) = ascii char
   173                                  wait_for_key_press:     
   174 000000C4 E80E00                      call is_key_pressed
   175 000000C7 90                          nop
   176 000000C8 74FA                        jz wait_for_key_press
   177 000000CA E80F00                      call get_key_pressed
   178 000000CD C3                          ret   
   179                                  
   180                                  ; --- interrupt shorthands
   181                                  
   182                                  ; ticks are in (high) cx, (low) dx
   183                                  get_time:   
   184 000000CE 50                          push ax 
   185 000000CF B400                        mov ah, 0x00
   186 000000D1 CD1A                        int 0x1A
   187 000000D3 58                          pop ax
   188 000000D4 C3                          ret    
   189                                  
   190                                  ; set the Z-Flag (jz label) to 1 if a key is pressed
   191                                  is_key_pressed: 
   192 000000D5 50                          push ax
   193 000000D6 B401                        mov ah, 0x01
   194 000000D8 CD16                        int 0x16
   195 000000DA 58                          pop ax
   196 000000DB C3                          ret
   197                                  
   198                                  ; returns 
   199                                  ; (ah) = keycode
   200                                  ; (al) = ascii char
   201                                  get_key_pressed: 
   202 000000DC B400                        mov ah, 0x00
   203 000000DE CD16                        int 0x16
   204 000000E0 C3                          ret
   205                                  
   206                                  ; --- others
   207                                          
   208                                  
   209 000000E1 CD20                        int 0x20
